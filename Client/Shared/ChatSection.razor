@using MVCBlazorChatApp.Client.Models

<div id="ChatSection">
    <div id="ChatContent">
        <div class="message-box">
            <div class="message-header">
                <div class="name" title="HMZ">
                    HMZ
                </div>
                <span class="date">@DateTime.Now</span>
            </div>
            <p class="message">
                Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et
                dolore magna aliqua.
            </p>
        </div>
    </div>
    <div id="ChatFooter">
            <DataAnnotationsValidator />
            <div class="form-group">
                <div class="input-wrapper input-wrapper--column">
                    <div class="input">
                        <label class="icon"><i class="las la-comment-medical"></i></label>
                        <InputText type="text" @bind-Value="@MessageModel.Message" placeholder="Write a message..." />
                    </div>
                </div>
                <ValidationMessage For="@(() => MessageModel.Message)" />
            </div>
            <div>
                <button type="submit">Send <i class="las la-paper-plane"></i></button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [Inject] private IJSRuntime JSRuntime { get; set; }
    [Parameter] public string UIMode { get; set; }
    [Parameter] public string Room { get; set; }
    private EditContext editContext;
    private MessageModel MessageModel { get; set; } = new MessageModel();
    protected override void OnInitialized()
    {
        editContext = new EditContext(MessageModel);
    }
    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (UIMode == "W-Mode")
        {
            await JSRuntime.InvokeVoidAsync("InitializeOS", "ChatContent", "os-theme-dark", "chat");
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("InitializeOS", "ChatContent", "os-theme-light", "chat");
        }
    }
}