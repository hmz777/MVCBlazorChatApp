@using MVCBlazorChatApp.Client.Models
@using Microsoft.AspNetCore.SignalR.Client
@using MVCBlazorChatApp.Shared.Models
@implements IDisposable

<div id="ChatSection">
    <div id="ChatContent">
    </div>
    <div id="ChatFooter">
        <EditForm EditContext="@editContext" OnValidSubmit="@ValidSubmit" class="flex-row">
            <DataAnnotationsValidator />
            <div class="form-group">
                <div class="input-wrapper input-wrapper--column">
                    <div class="input">
                        <label class="icon"><i class="las la-comment-medical"></i></label>
                        <InputText type="text" @bind-Value="@MessageModel.Message" placeholder="Write a message..." />
                        <button id="emoji" type="button"><i class="las la-smile"></i></button>
                    </div>
                </div>
                <ValidationMessage For="@(() => MessageModel.Message)" />
            </div>
            <div>
                <button type="submit">Send <i class="las la-paper-plane"></i></button>
            </div>
        </EditForm>
    </div>
</div>

@code {

    [Inject] private NavigationManager NavigationManager { get; set; }
    [Inject] private IJSRuntime JSRuntime { get; set; }
    [Parameter] public string UIMode { get; set; }
    [Parameter] public string Room { get; set; }
    private EditContext editContext;
    private MessageModel MessageModel { get; set; } = new MessageModel();
    private UserModel UserModel { get; set; }
    private HubConnection hubConnection;

    #region Component Methods

    protected override void OnInitialized()
    {
        UserModel = new UserModel()
        {
            Room = Room
        };

        editContext = new EditContext(MessageModel);

        SetupSignalR();
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (UIMode == "W-Mode")
        {
            await JSRuntime.InvokeVoidAsync("InitializeOS", "ChatContent", "os-theme-dark", "chat");
            await JSRuntime.InvokeVoidAsync("SetupEmojiButton");
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("InitializeOS", "ChatContent", "os-theme-light", "chat");
            await JSRuntime.InvokeVoidAsync("SetupEmojiButton");
        }
    }

    private async Task ValidSubmit()
    {
        if (!IsConnected)
            await ShowNotificationAsync(
                MessageStatus.Failure,
                "We're having trouble connecting you to our server. Try refreshing the page or wait for a reconnect.");


        await Send();

        MessageModel = new MessageModel();
        editContext = new EditContext(MessageModel);
    }

    #endregion

    #region SignalR Methods

    public void SetupSignalR()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
            .Build();

        AttachCallbacks();
    }

    public void AttachCallbacks()
    {
        hubConnection.On<UserModel, string>("ReceiveMessage", ReceiveMessageAsync);
        hubConnection.On<UserModel>("AddUser", AddUserAsync);
        hubConnection.On<UserModel>("RemoveUser", RemoveUserAsync);
        hubConnection.On<MessageStatus, string>("ReceiveNotification", ShowNotificationAsync);
        hubConnection.Reconnecting += OnReconnectingAsync;
        hubConnection.Reconnected += OnReconnectedAsync;
        hubConnection.Closed += OnClosedAsync;
    }

    public async Task InitializeSignalR(string Username)
    {
        UserModel.Username = Username;

        await hubConnection.StartAsync();

        await hubConnection.InvokeAsync("AddToGroup", UserModel, Room);
    }

    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;

    Task Send() =>
                hubConnection.SendAsync("SendGroupMessage", UserModel, MessageModel.Message);

    public async Task OnReconnectingAsync(Exception exception)
    {
        await ShowNotificationAsync(MessageStatus.Failure,
            "Connection lost.");
        await ShowNotificationAsync(MessageStatus.Warning,
            "Reconnecting...");
    }

    public async Task OnReconnectedAsync(string connectionId)
    {
        await ShowNotificationAsync(MessageStatus.Success,
            "Reconnect successful.");
    }

    public async Task OnClosedAsync(Exception exception)
    {
        if (exception != null)
            await ShowNotificationAsync(MessageStatus.Failure,
            "Connection closed due to an error.");
        else
            await ShowNotificationAsync(MessageStatus.Failure,
            "Connection closed.");
    }

    #endregion

    #region Clientside Callbacks

    /// <summary>
    /// Callback for chat messages.
    /// </summary>
    /// <param name="UserModel"></param>
    /// <param name="Message"></param>
    /// <returns></returns>
    private async Task ReceiveMessageAsync(UserModel UserModel, string Message)
    {
        await JSRuntime.InvokeVoidAsync("AddMessage", RenderMessage(Username: UserModel.Username, Color: UserModel.Color, Message: Message));
    }

    /// <summary>
    /// Callback for new connected users, It adds the new user to the list of users in the user section.
    /// </summary>
    /// <param name="userModel"></param>
    /// <returns></returns>
    public async Task AddUserAsync(UserModel UserModel)
    {
        await JSRuntime.InvokeVoidAsync("AddUser",
                RenderUser(Username: UserModel.Username,
                Color: UserModel.Color));
    }

    /// <summary>
    /// Callback for disconnected users, It removes the user from the list of users in the user section.
    /// </summary>
    /// <param name="userModel"></param>
    /// <returns></returns>
    public async Task RemoveUserAsync(UserModel UserModel)
    {
        await JSRuntime.InvokeVoidAsync("RemoveUser", UserModel.Username);
    }

    #endregion

    #region Admin Tools

    /// <summary>
    /// Add administrative message.
    /// </summary>
    /// <param name="MessageStatus"></param>
    /// <param name="Message"></param>
    /// <returns></returns>
    public async Task AddMessageAsync(MessageStatus MessageStatus, string Message)
    {
        await JSRuntime.InvokeVoidAsync("AddMessage",
            RenderMessage(Username: "Z-Bot",
            Message: Message,
            MessageStatus: MessageStatus));
    }

    /// <summary>
    /// Add administrative message.
    /// </summary>
    /// <param name="MessageStatus"></param>
    /// <param name="Message"></param>
    /// <returns></returns>
    public async Task ShowNotificationAsync(MessageStatus MessageStatus, string Message)
    {
        await JSRuntime.InvokeVoidAsync("ShowNotification",
                Message,
                (int)MessageStatus,
                5000,
                new { x = "right", y = "top" },
                true);
    }

    #endregion

    #region Markup Methods

    public string RenderMessage(string Username, string Message, string Color = null, MessageStatus MessageStatus = MessageStatus.None)
    {
        if (MessageStatus == MessageStatus.None && Color != null)
        {
            return $"<div class=\"message-box\"><div class=\"message-header\"><div style=\"background:{Color}\" class=\"name\" title=\"{Username}\">{Username}</div><span class=\"date\">{DateTime.UtcNow}</span></div><pre class=\"message\">{Message}</pre></div>";
        }
        else
        {
            switch (MessageStatus)
            {
                case MessageStatus.Success:
                    return $"<div class=\"message-box\"><div class=\"message-header\"><div class=\"name\" title=\"{Username}\"><i class=\"las la-shield-alt\"></i> {Username}</div><span class=\"date\">{DateTime.UtcNow}</span></div><p class=\"message message--success\">{Message}</p></div>";
                case MessageStatus.Failure:
                    return $"<div class=\"message-box\"><div class=\"message-header\"><div class=\"name\" title=\"{Username}\"><i class=\"las la-shield-alt\"></i> {Username}</div><span class=\"date\">{DateTime.UtcNow}</span></div><p class=\"message message--failure\">{Message}</p></div>";
                case MessageStatus.Information:
                    return $"<div class=\"message-box\"><div class=\"message-header\"><div class=\"name\" title=\"{Username}\"><i class=\"las la-shield-alt\"></i> {Username}</div><span class=\"date\">{DateTime.UtcNow}</span></div><p class=\"message message--information\">{Message}</p></div>";
                case MessageStatus.Warning:
                    return $"<div class=\"message-box\"><div class=\"message-header\"><div class=\"name\" title=\"{Username}\"><i class=\"las la-shield-alt\"></i> {Username}</div><span class=\"date\">{DateTime.UtcNow}</span></div><p class=\"message message--warning\">{Message}</p></div>";
                default:
                    return $"<div class=\"message-box\"><div class=\"message-header\"><div class=\"name\" title=\"{Username}\"><i class=\"las la-shield-alt\"></i> {Username}</div><span class=\"date\">{DateTime.UtcNow}</span></div><p class=\"message\">{Message}</p></div>";
            }
        }
    }

    public string RenderUser(string Username, string Color)
    {
        return $"<li title=\"{Username}\" style=\"background:{Color}\">{Username}</li>";
    }

    #endregion

    public void Dispose()
    {
        _ = hubConnection.DisposeAsync();
    }
}